-- üîß Spodot Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÏàòÏ†ï ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
-- ÎàÑÎùΩÎêú Ïª¨ÎüºÎì§ÏùÑ ÏïàÏ†ÑÌïòÍ≤å Ï∂îÍ∞ÄÌï©ÎãàÎã§

-- 1. tasks ÌÖåÏù¥Î∏îÏóê ÎàÑÎùΩÎêú Ïª¨ÎüºÎì§ Ï∂îÍ∞Ä
DO $$ 
BEGIN
    -- priority Ïª¨Îüº Ï∂îÍ∞Ä
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tasks' AND column_name = 'priority') THEN
        ALTER TABLE tasks ADD COLUMN priority varchar(10) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'urgent'));
        RAISE NOTICE 'Added priority column to tasks table';
    END IF;

    -- category Ïª¨Îüº Ï∂îÍ∞Ä  
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tasks' AND column_name = 'category') THEN
        ALTER TABLE tasks ADD COLUMN category varchar(50) DEFAULT 'general' CHECK (category IN ('maintenance', 'administrative', 'client', 'training', 'general'));
        RAISE NOTICE 'Added category column to tasks table';
    END IF;

    -- due_date Ïª¨Îüº Ï∂îÍ∞Ä
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tasks' AND column_name = 'due_date') THEN
        ALTER TABLE tasks ADD COLUMN due_date date;
        RAISE NOTICE 'Added due_date column to tasks table';
    END IF;

    -- start_time Ïª¨Îüº Ï∂îÍ∞Ä
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tasks' AND column_name = 'start_time') THEN
        ALTER TABLE tasks ADD COLUMN start_time time;
        RAISE NOTICE 'Added start_time column to tasks table';
    END IF;

    -- end_time Ïª¨Îüº Ï∂îÍ∞Ä
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tasks' AND column_name = 'end_time') THEN
        ALTER TABLE tasks ADD COLUMN end_time time;
        RAISE NOTICE 'Added end_time column to tasks table';
    END IF;

    -- tags Ïª¨Îüº Ï∂îÍ∞Ä
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tasks' AND column_name = 'tags') THEN
        ALTER TABLE tasks ADD COLUMN tags jsonb DEFAULT '[]';
        RAISE NOTICE 'Added tags column to tasks table';
    END IF;
END $$;

-- 2. ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏îÎì§ ÏÉùÏÑ± (Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞Îßå)

-- task_comments ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS task_comments (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  task_id uuid,
  author_id uuid,
  author_name varchar(255) NOT NULL,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT now()
);

-- daily_reports ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS daily_reports (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  author_id uuid,
  author_name varchar(255) NOT NULL,
  date date NOT NULL,
  content text,
  tasks jsonb,
  issues text,
  tomorrow text,
  images jsonb DEFAULT '[]',
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- announcements ÌÖåÏù¥Î∏î  
CREATE TABLE IF NOT EXISTS announcements (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  title varchar(255) NOT NULL,
  content text NOT NULL,
  author_id uuid,
  author_name varchar(255) NOT NULL,
  priority varchar(10) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
  tags jsonb DEFAULT '[]',
  expiry_date date,
  is_pinned boolean DEFAULT false,
  is_active boolean DEFAULT true,
  target_roles jsonb DEFAULT '[]',
  read_by jsonb DEFAULT '[]',
  attachments jsonb DEFAULT '[]',
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- schedules ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS schedules (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  client_name varchar(255) NOT NULL,
  client_id uuid,
  trainer_id uuid NOT NULL,
  trainer_name varchar(255) NOT NULL,
  type varchar(50) CHECK (type IN ('PT', 'OT', 'GROUP', 'CONSULT')) NOT NULL,
  date date NOT NULL,
  start_time time NOT NULL,
  end_time time NOT NULL,
  notes text,
  recurrence varchar(20) DEFAULT 'none' CHECK (recurrence IN ('none', 'daily', 'weekly', 'monthly')),
  recurrence_end_date date,
  is_completed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- suggestions ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS suggestions (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  title varchar(255) NOT NULL,
  content text NOT NULL,
  category varchar(50) DEFAULT 'other' CHECK (category IN ('facility', 'service', 'program', 'other')),
  author_id uuid,
  author_name varchar(255) NOT NULL,
  status varchar(20) DEFAULT 'pending' CHECK (status IN ('pending', 'in_review', 'approved', 'rejected', 'implemented')),
  priority varchar(10) DEFAULT 'low' CHECK (priority IN ('low', 'medium', 'high')),
  admin_response text,
  admin_response_by varchar(255),
  admin_response_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- 3. Ïô∏Îûò ÌÇ§ Ï†úÏïΩÏ°∞Í±¥ Ï∂îÍ∞Ä (ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞ÏóêÎßå)
DO $$ 
BEGIN
    -- task_comments Ïô∏Îûò ÌÇ§
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'task_comments') THEN
        -- task_id Ïô∏Îûò ÌÇ§ (Ï§ëÎ≥µ Î∞©ÏßÄ)
        IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_task_comments_task_id') THEN
            ALTER TABLE task_comments ADD CONSTRAINT fk_task_comments_task_id 
            FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE;
            RAISE NOTICE 'Added foreign key constraint for task_comments.task_id';
        END IF;
        
        -- author_id Ïô∏Îûò ÌÇ§ (Ï§ëÎ≥µ Î∞©ÏßÄ)
        IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_task_comments_author_id') THEN
            ALTER TABLE task_comments ADD CONSTRAINT fk_task_comments_author_id 
            FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE SET NULL;
            RAISE NOTICE 'Added foreign key constraint for task_comments.author_id';
        END IF;
    END IF;

    -- daily_reports Ïô∏Îûò ÌÇ§
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'daily_reports') THEN
        IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_daily_reports_author_id') THEN
            ALTER TABLE daily_reports ADD CONSTRAINT fk_daily_reports_author_id 
            FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE SET NULL;
            RAISE NOTICE 'Added foreign key constraint for daily_reports.author_id';
        END IF;
    END IF;

    -- announcements Ïô∏Îûò ÌÇ§
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'announcements') THEN
        IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_announcements_author_id') THEN
            ALTER TABLE announcements ADD CONSTRAINT fk_announcements_author_id 
            FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE SET NULL;
            RAISE NOTICE 'Added foreign key constraint for announcements.author_id';
        END IF;
    END IF;

    -- schedules Ïô∏Îûò ÌÇ§
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'schedules') THEN
        IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_schedules_trainer_id') THEN
            ALTER TABLE schedules ADD CONSTRAINT fk_schedules_trainer_id 
            FOREIGN KEY (trainer_id) REFERENCES users(id) ON DELETE CASCADE;
            RAISE NOTICE 'Added foreign key constraint for schedules.trainer_id';
        END IF;
        
        IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'fk_schedules_client_id') THEN
            ALTER TABLE schedules ADD CONSTRAINT fk_schedules_client_id 
            FOREIGN KEY (client_id) REFERENCES users(id) ON DELETE SET NULL;
            RAISE NOTICE 'Added foreign key constraint for schedules.client_id';
        END IF;
    END IF;
END $$;

-- 4. Ïù∏Îç±Ïä§ Ï∂îÍ∞Ä (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
CREATE INDEX IF NOT EXISTS idx_tasks_priority ON tasks(priority);
CREATE INDEX IF NOT EXISTS idx_tasks_category ON tasks(category);  
CREATE INDEX IF NOT EXISTS idx_tasks_due_date ON tasks(due_date);
CREATE INDEX IF NOT EXISTS idx_task_comments_task_id ON task_comments(task_id);
CREATE INDEX IF NOT EXISTS idx_daily_reports_date ON daily_reports(date);
CREATE INDEX IF NOT EXISTS idx_announcements_is_active ON announcements(is_active);
CREATE INDEX IF NOT EXISTS idx_schedules_date ON schedules(date);
CREATE INDEX IF NOT EXISTS idx_schedules_trainer_id ON schedules(trainer_id);
CREATE INDEX IF NOT EXISTS idx_suggestions_status ON suggestions(status);

-- 5. Ìä∏Î¶¨Í±∞ Ìï®Ïàò ÏÉùÏÑ± (ÏïàÏ†ÑÌïòÍ≤å)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 6. Ìä∏Î¶¨Í±∞ Ï∂îÍ∞Ä (ÏïàÏ†ÑÌïòÍ≤å)
DO $$ 
BEGIN
    -- tasks ÌÖåÏù¥Î∏î Ìä∏Î¶¨Í±∞
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_tasks_updated_at') THEN
        CREATE TRIGGER update_tasks_updated_at 
            BEFORE UPDATE ON tasks 
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        RAISE NOTICE 'Added update trigger for tasks table';
    END IF;

    -- daily_reports ÌÖåÏù¥Î∏î Ìä∏Î¶¨Í±∞
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_daily_reports_updated_at') THEN
        CREATE TRIGGER update_daily_reports_updated_at 
            BEFORE UPDATE ON daily_reports 
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        RAISE NOTICE 'Added update trigger for daily_reports table';
    END IF;

    -- announcements ÌÖåÏù¥Î∏î Ìä∏Î¶¨Í±∞
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_announcements_updated_at') THEN
        CREATE TRIGGER update_announcements_updated_at 
            BEFORE UPDATE ON announcements 
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        RAISE NOTICE 'Added update trigger for announcements table';
    END IF;

    -- schedules ÌÖåÏù¥Î∏î Ìä∏Î¶¨Í±∞
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_schedules_updated_at') THEN
        CREATE TRIGGER update_schedules_updated_at 
            BEFORE UPDATE ON schedules 
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        RAISE NOTICE 'Added update trigger for schedules table';
    END IF;

    -- suggestions ÌÖåÏù¥Î∏î Ìä∏Î¶¨Í±∞
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_suggestions_updated_at') THEN
        CREATE TRIGGER update_suggestions_updated_at 
            BEFORE UPDATE ON suggestions 
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        RAISE NOTICE 'Added update trigger for suggestions table';
    END IF;
END $$;

-- 7. ÏôÑÎ£å Î©îÏãúÏßÄ
DO $$ 
BEGIN
    RAISE NOTICE '==========================================';
    RAISE NOTICE '‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÏàòÏ†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!';
    RAISE NOTICE '==========================================';
    RAISE NOTICE 'üìã Ï∂îÍ∞ÄÎêú ÎÇ¥Ïö©:';
    RAISE NOTICE '  - tasks ÌÖåÏù¥Î∏î: priority, category, due_date, start_time, end_time, tags Ïª¨Îüº';
    RAISE NOTICE '  - ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏îÎì§: task_comments, daily_reports, announcements, schedules, suggestions';
    RAISE NOTICE '  - Ïô∏Îûò ÌÇ§ Ï†úÏïΩÏ°∞Í±¥ Î∞è Ïù∏Îç±Ïä§';
    RAISE NOTICE '  - ÏûêÎèô updated_at Ìä∏Î¶¨Í±∞';
    RAISE NOTICE '==========================================';
END $$; 